import OpenAI from "openai";
import { db, authAdmin } from "/lib/firebaseAdmin";
import cookie from "cookie";
import admin from "firebase-admin";
import { Timestamp } from "firebase-admin/firestore";

export const config = {
  runtime: "nodejs",
};

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  const { prompt, lang = "fr" } = req.body;
  if (!prompt || prompt.length < 10) {
    return res.status(400).json({ error: "Prompt trop court ou manquant" });
  }

  const accessToken = req.headers.authorization?.split(" ")[1];
  if (!accessToken) {
    return res.status(401).json({ error: "Token Spotify manquant." });
  }

  try {
    const cookies = cookie.parse(req.headers.cookie || "");
    const idToken = cookies.token;

    let uid = null;
    let userRef = null;
    let userDoc = null;

    if (idToken) {
      const decodedToken = await authAdmin.verifyIdToken(idToken);
      uid = decodedToken.uid;
      userRef = db.collection("users").doc(uid);
      userDoc = await userRef.get();
    }

    // üîê Contr√¥le utilisateur
    let userData = {};
    if (userDoc?.exists) {
      userData = userDoc.data();
    }

    const abonnement = userData.abonnement ?? false;
    const credits = userData.credits ?? 0;
    const freePromptUsed = userData.freePromptUsed ?? false;

    console.log("üë§ Statut utilisateur :", {
      abonnement,
      credits,
      freePromptUsed,
    });

    if (abonnement === true) {
      console.log("‚úÖ Utilisateur avec abonnement actif : acc√®s illimit√©");
    } else {
      if (!freePromptUsed) {
        await userRef?.set({ freePromptUsed: true }, { merge: true });
        console.log("üéÅ Premier prompt gratuit activ√©.");
      } else {
        if (credits <= 0) {
          console.warn("‚õîÔ∏è Blocage : plus de cr√©dits.");
          return res.status(403).json({ error: "Plus de cr√©dits disponibles." });
        }
        await userRef?.update({ credits: credits - 1 });
        console.log("üî¢ Cr√©dit utilis√© : il en reste", credits - 1);
      }
    }

  

    // üéØ Prompts adapt√©s pour 20 morceaux √ó 2
    const basePrompt = {
      fr: `
Tu es un expert en curation musicale.
En te basant uniquement sur le prompt utilisateur ci-dessous, g√©n√®re une playlist Spotify de 20 morceaux coh√©rente, originale et immersive.

Ta s√©lection doit inclure un m√©lange √©quilibr√© de titres populaires et de morceaux moins connus, rares ou √©mergents, afin de proposer une √©coute √† la fois engageante et surprenante. Priorise la coh√©rence de l'ambiance tout en favorisant la d√©couverte musicale.

Prompt utilisateur : """${prompt}"""

R√©ponds avec une liste JSON stricte, format :
[
  { "artist": "Nom artiste", "name": "Titre du morceau" },
  ...
]
Aucun commentaire. Aucun texte. Seulement la liste JSON.`,
      en: `
You are a music curation expert.
Based only on the user's description below, generate a coherent, original, and immersive playlist of 20 Spotify tracks.

Your selection should include a balanced mix of popular songs and lesser-known, rare, or emerging tracks to offer a fresh and surprising listening experience. Prioritize the overall vibe and atmosphere while encouraging musical discovery.

User prompt: """${prompt}"""

Respond with a strict JSON list, format:
[
  { "artist": "Artist Name", "name": "Track Title" },
  ...
]
No explanation. No comments. Just the JSON list.`,
      es: `
Eres un experto en curadur√≠a musical.
Bas√°ndote √∫nicamente en el siguiente prompt del usuario, genera una lista de reproducci√≥n de Spotify con 20 canciones coherente, original e inmersiva.

Tu selecci√≥n debe incluir una mezcla equilibrada entre canciones populares y temas menos conocidos, raros o emergentes, con el fin de ofrecer una experiencia auditiva fresca y sorprendente. Prioriza la coherencia de la atm√≥sfera y el estado de √°nimo, fomentando el descubrimiento musical.

Prompt del usuario: """${prompt}"""

Tu √∫nica tarea es devolver una lista en formato JSON estricto como este:
[
  { "artist": "Nombre del artista", "name": "T√≠tulo de la canci√≥n" },
  ...
]

‚ö†Ô∏è No agregues ning√∫n comentario, explicaci√≥n, texto introductorio o final.
Solo responde con la lista JSON, nada m√°s.
`
    }[lang];

    // üöÄ G√©n√©ration GPT en 2 appels de 20
    const [completion1, completion2] = await Promise.all([
      openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: basePrompt }],
        temperature: 0.7,
      }),
      openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: basePrompt }],
        temperature: 0.7,
      }),
    ]);

    const raw1 = completion1.choices[0].message.content.trim();
    const raw2 = completion2.choices[0].message.content.trim();

    if (!raw1.startsWith("[") || !raw2.startsWith("[")) {
      console.error("‚ùå R√©ponse GPT invalide :", { raw1, raw2 });
      return res.status(500).json({ error: "R√©ponse GPT non valide. Veuillez reformuler votre demande." });
    }

    let tracks1, tracks2;
    try {
      tracks1 = JSON.parse(raw1);
      tracks2 = JSON.parse(raw2);
    } catch (err) {
      console.error("‚ùå Parsing JSON GPT", err);
      return res.status(500).json({ error: "Erreur GPT, JSON invalide" });
    }

    const tracks = [...tracks1, ...tracks2];

    // üîç Recherche intelligente des URIs Spotify avec fallback
const resolvedUris = await Promise.all(
  tracks.map(async (t) => {
    const queries = [
      `${t.name} ${t.artist}`,
      `${t.name}`,
      `${t.artist}`,
      `${t.artist} ${t.name.split(" ")[0]}`,
    ];

    let uri = null;

    for (const rawQuery of queries) {
      const q = encodeURIComponent(rawQuery);
      const resSearch = await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      const data = await resSearch.json();
      uri = data.tracks?.items?.[0]?.uri || null;

      if (uri) {
        if (rawQuery !== `${t.name} ${t.artist}`) {
          console.log(`üîÅ Fallback r√©ussi : ${rawQuery} ‚Üí ${uri}`);
        }
        break;
      }
    }

    if (!uri) {
      console.warn(`‚ùå Non trouv√© sur Spotify : ${t.artist} - ${t.name}`);
    }

    return uri;
  })
);

const uris = resolvedUris.filter(Boolean);

console.log(`üéØ ${uris.length}/${tracks.length} morceaux trouv√©s sur Spotify`);

if (uris.length === 0) {
  return res.status(400).json({ error: "Aucun morceau trouv√©" });
}

    // üë§ R√©cup√©ration de l'utilisateur Spotify
    const userRes = await fetch("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    const user = await userRes.json();

    const rawTitle = prompt.length > 40 ? prompt.slice(0, 40) + "‚Ä¶" : prompt;
    const cleanTitle = rawTitle.replace(/[^\w\s√Ä-√ø!?.,:;'-]/g, "").trim();
    const playlistName = `${cleanTitle.charAt(0).toUpperCase() + cleanTitle.slice(1)}`;

    // üìù Cr√©ation de la playlist
    const playlistRes = await fetch(`https://api.spotify.com/v1/users/${user.id}/playlists`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name: playlistName,
        description: lang === "fr" ? "G√©n√©r√©e par Sonarmo" : "Generated by Sonarmo",
        public: false,
      }),
    });

    const playlist = await playlistRes.json();
    console.log("üéµ Playlist Spotify API response :", playlist);

    await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ uris }),
    });

    if (uid) {
      try {
        await db.collection("promptHistory").add({
          uid,
          prompt,
          playlistUrl: playlist?.external_urls?.spotify || "",
          playlistName: playlist.name,
          totalTracks: uris.length,
          spotifyEmail: user.email || "",
          spotifyCountry: user.country || "",
          spotifyProduct: user.product || "",
          spotifyDisplayName: user.display_name || "",
          createdAt: admin.firestore.Timestamp.now(),
        });
      } catch (err) {
        console.warn("‚ö†Ô∏è Impossible d'enregistrer l'historique du prompt :", err);
      }
    }

    return res.status(200).json({
      url: playlist?.external_urls?.spotify || "",
      total: uris.length,
      message: "‚úÖ Playlist g√©n√©r√©e avec succ√®s",
    });
  } catch (err) {
    console.error("‚ùå Erreur g√©n√©ration playlist via prompt", err);
    return res.status(500).json({ error: "Erreur serveur" });
  }
}